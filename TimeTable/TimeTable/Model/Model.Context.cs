//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeTable.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TimetableEntities : DbContext
    {
        public TimetableEntities()
            : base("name=TimetableEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Audiences> Audiences { get; set; }
        public virtual DbSet<Availability> Availability { get; set; }
        public virtual DbSet<Disciplines> Disciplines { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Employees_Disciplines> Employees_Disciplines { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<Sessions> Sessions { get; set; }
        public virtual DbSet<Specialities> Specialities { get; set; }
        public virtual DbSet<StudyPlan> StudyPlan { get; set; }
        public virtual DbSet<StudyPlan_Disciplines> StudyPlan_Disciplines { get; set; }
        public virtual DbSet<StudyPlan_DisciplinesByWeek> StudyPlan_DisciplinesByWeek { get; set; }
    
        public virtual ObjectResult<CheckUser_Result> CheckUser(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckUser_Result>("CheckUser", loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetAssignedDisciplinesByTeacher_Result> GetAssignedDisciplinesByTeacher(Nullable<int> teacherId, string searchTerm)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssignedDisciplinesByTeacher_Result>("GetAssignedDisciplinesByTeacher", teacherIdParameter, searchTermParameter);
        }
    
        public virtual ObjectResult<GetUnassignedDisciplinesByTeacher_Result> GetUnassignedDisciplinesByTeacher(Nullable<int> teacherId, string searchTerm)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnassignedDisciplinesByTeacher_Result>("GetUnassignedDisciplinesByTeacher", teacherIdParameter, searchTermParameter);
        }
    
        public virtual int SearchByAllFields(string tableName, string searchText)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchByAllFields", tableNameParameter, searchTextParameter);
        }
    }
}
